{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","useState","phone","setPhone","country","useGeoLocation","className","defaultCountry","value","placeholder","onChange","Button","type","onClick","e","preventDefault","to","split","window","open","Send","App","WhatsApp","href","GitHub","Mail","CloudDownload","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kSAwCeA,MAjCf,WAAiB,IAAD,EACcC,mBAAS,IADvB,mBACLC,EADK,KACEC,EADF,KAEJC,EAAYC,cAAZD,QASV,OACE,8BACE,uBAAME,UAAU,iBAAhB,UACE,kFACA,cAAC,IAAD,CACEC,eAAgBH,EAChBI,MAAON,EACPO,YAAY,eACZC,SAAUP,IAEZ,eAACQ,EAAA,EAAD,CACEC,KAAK,SACLN,UAAU,mBACVO,QApBc,SAACC,GACnBA,EAAEC,iBACF,IAAMC,EAAKd,EAAMe,MAAM,KAAK,GACxBD,GACFE,OAAOC,KAAK,uCAAyCH,IAarD,UAKE,cAACI,EAAA,EAAD,IALF,iBCQOC,MA/Bf,WACE,OACE,sBAAKf,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,0CACA,cAACgB,EAAA,EAAD,OAEF,sBAAKhB,UAAU,OAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,SAAf,UACE,mBAAGiB,KAAK,8BAAR,SACE,cAACZ,EAAA,EAAD,UACE,cAACa,EAAA,EAAD,QAGJ,mBAAGD,KAAK,kCAAR,SACE,cAACZ,EAAA,EAAD,UACE,cAACc,EAAA,EAAD,QAGJ,mBAAGF,KAAK,IAAR,SACE,cAACZ,EAAA,EAAD,UACE,cAACe,EAAA,EAAD,kBCfRC,EAAcC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDYnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,aAAwBxC,OAAOW,SAASN,MACpDoC,SAAWzC,OAAOW,SAAS8B,OAIvC,OAGFzC,OAAO0C,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMyB,aAAN,sBAEP/B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,GACHK,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BpB,OAAOW,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.0b1d99fa.chunk.js","sourcesContent":["import { Button } from \"@material-ui/core\";\r\nimport { Send } from \"@material-ui/icons\";\r\nimport { useState } from \"react\";\r\nimport useGeoLocation from \"react-ipgeolocation\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport PhoneInput from \"react-phone-number-input\";\r\n\r\nfunction Form() {\r\n    const [phone, setPhone] = useState(\"\");\r\n    const { country } = useGeoLocation();\r\n  \r\n    const sendMessage = (e) => {\r\n      e.preventDefault();\r\n      const to = phone.split(\"+\")[1];\r\n      if (to) {\r\n        window.open(\"https://web.whatsapp.com/send?phone=\" + to);\r\n      }\r\n    };\r\n  return (\r\n    <div>\r\n      <form className=\"fasttext__form\">\r\n        <p>Send Whatsapp messages without saving the number.</p>\r\n        <PhoneInput\r\n          defaultCountry={country}\r\n          value={phone}\r\n          placeholder=\"Phone Number\"\r\n          onChange={setPhone}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          className=\"fasttext__button\"\r\n          onClick={sendMessage}\r\n        >\r\n          <Send /> Send\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import { Button } from \"@material-ui/core\";\nimport { CloudDownload, GitHub, Mail, WhatsApp } from \"@material-ui/icons\";\nimport \"./app.css\";\nimport Form from \"./Form\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1>FastTxts</h1>\n        <WhatsApp />\n      </div>\n      <div className=\"main\">\n        <Form />\n        <div className=\"footer\">\n          <a href=\"https://github.com/sameerfa\">\n            <Button>\n              <GitHub />\n            </Button>\n          </a>\n          <a href=\"mailto:write2sameerfa@gmail.com\">\n            <Button>\n              <Mail />\n            </Button>\n          </a>\n          <a href=\"/\">\n            <Button>\n              <CloudDownload />\n            </Button>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();"],"sourceRoot":""}